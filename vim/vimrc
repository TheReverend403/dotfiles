" {{{ Initial setup
let s:configdir = '.vim'
if has('nvim')
    let s:configdir = '.config/nvim'
endif

if empty(glob('~/' . s:configdir . '/autoload/plug.vim'))
    silent call system('mkdir -p ~/' . s:configdir . '/{autoload,bundle,cache,undo,backups,swaps}')
    silent call system('curl -fLo ~/' . s:configdir . '/autoload/plug.vim https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim')
    execute 'source  ~/' . s:configdir . '/autoload/plug.vim'
    autocmd VimEnter * PlugInstall
    source $MYVIMRC
endif
" }}}

" {{{ Plugins
    call plug#begin('~/' . s:configdir . '/bundle')

    Plug 'tpope/vim-sensible'

    Plug 'morhetz/gruvbox'

    Plug 'tpope/vim-fugitive'

    Plug 'airblade/vim-gitgutter'

    Plug 'tpope/vim-surround'

    Plug 'tpope/vim-endwise'

    Plug 'dag/vim-fish'

    Plug 'Shougo/neocomplete.vim' " {{{
        let g:acp_enableAtStartup = 0
        let g:neocomplete#enable_smart_case = 1
        let g:neocomplete#enable_at_startup = 1
        autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
        autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
        autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
        autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
        autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
        inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
        if !exists('g:neocomplete#sources#omni#input_patterns')
            let g:neocomplete#sources#omni#input_patterns = {}
            let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
            let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
            let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'
        endif
    " }}}

    Plug 'bling/vim-bufferline'

    Plug 'ctrlpvim/ctrlp.vim' " {{{
        let g:ctrlp_map = '<c-p>'
        let g:ctrlp_working_path_mode = 'ra'
        let g:ctrlp_root_markers = ['Makefile', '.git', 'README.md', 'README', 'LICENSE.md', 'LICENSE', 'requirements.txt', 'composer.json']
        let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files . -co --exclude-standard', 'find %s -type f']
        let g:ctrlp_custom_ignore = {
            \ 'dir':  '\v[\/]\.(git|hg|svn)$',
            \ 'file': '\v\.(exe|so|dll)$',
            \ }
    " }}}

    Plug 'chilicuil/vim-sprunge' " {{{
        let g:sprunge_cmd = 'curl -s -F "f:1=<-" http://ix.io'
    " }}}


    Plug 'itchyny/lightline.vim' " {{{
        let g:lightline = {
            \ 'enable': {
            \   'statusline': 1,
            \   'tabline': 0
            \ },
            \ 'colorscheme': 'gruvbox',
            \ 'mode_map': {
            \   'n'      : ' N ',
            \   'i'      : ' I ',
            \   'R'      : ' R ',
            \   'v'      : ' V ',
            \   'V'      : 'V-L',
            \   'c'      : ' C ',
            \   "\<C-v>" : 'V-B',
            \   's'      : ' S ',
            \   'S'      : 'S-L',
            \   "\<C-s>" : 'S-B',
            \   "t"      : ' T ',
            \   '?'      : ' ? '
            \ },
            \ 'active': {
            \   'left': [
            \     ['mode', 'paste'],
            \     ['fugitive', 'filename']
            \  ],
            \   'right': [
            \     ['columninfo'],
            \     ['percent'],
            \     ['fileformat', 'fileencoding', 'filetype']
            \   ]
            \ },
            \ 'component_function': {
            \   'modified': 'LightLineModified',
            \   'readonly': 'LightLineReadonly',
            \   'fugitive': 'LightLineFugitive',
            \   'filename': 'LightLineFilename',
            \   'fileformat': 'LightLineFileformat',
            \   'filetype': 'LightLineFiletype',
            \   'fileencoding': 'LightLineFileencoding',
            \   'columninfo': 'LightLineColumnInfo',
            \   'mode': 'LightLineMode',
            \ },
            \ 'separator': { 'left': '', 'right': '' },
            \ 'subseparator': { 'left': '', 'right': '' }
            \ }

            function! LightLineModified()
                return &ft =~ 'help' ? '' : &modified ? '+' : &modifiable ? '' : '-'
            endfunction

            function! LightLineReadonly()
                return &ft !~? 'help' && &readonly ? '' : ''
            endfunction

            function! LightLineFilename()
                return ('' != LightLineReadonly() ? LightLineReadonly() . ' ' : '') .
                    \  (&ft == 'unite' ? unite#get_status_string() :
                    \ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
                    \ ('' != LightLineModified() ? ' ' . LightLineModified() : '')
            endfunction

            function! LightLineFugitive()
                if exists("*fugitive#head")
                    let _ = fugitive#head()
                    return strlen(_) ? ' '._ : ''
                endif
                return ''
            endfunction

            function! LightLineFileformat()
                return winwidth(0) > 70 ? &fileformat : ''
            endfunction

            function! LightLineFiletype()
                return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
            endfunction

            function! LightLineFileencoding()
                return winwidth(0) > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
            endfunction

            function! LightLineMode()
                return winwidth(0) > 60 ? lightline#mode() : ''
            endfunction

            function! LightLineColumnInfo()
                return virtcol('.')
            endfunction
    " }}}

    Plug 'tpope/vim-commentary'

    Plug 'haya14busa/incsearch.vim' " {{{
        map /  <Plug>(incsearch-forward)
        map ?  <Plug>(incsearch-backward)
        map g/ <Plug>(incsearch-stay)
        map n  <Plug>(incsearch-nohl-n)
        map N  <Plug>(incsearch-nohl-N)
        map *  <Plug>(incsearch-nohl-*)
        map #  <Plug>(incsearch-nohl-#)
        map g* <Plug>(incsearch-nohl-g*)
        map g# <Plug>(incsearch-nohl-g#)
        let g:incsearch#consistent_n_direction = 1
        let g:incsearch#auto_nohlsearch = 1
        let g:incsearch#magic = '\v'
    " }}}

    " {{{ Rust
        Plug 'rust-lang/rust.vim'
        Plug 'racer-rust/vim-racer'
        let g:rustfmt_autosave = 1
        let g:racer_experimental_completer = 1
    " }}}

    call plug#end()
" }}}

" {{{ UI
    set encoding=utf-8
    set fileencoding=utf-8
    scriptencoding utf-8

    if filereadable($HOME . '/' . s:configdir . '/bundle/gruvbox/colors/gruvbox.vim')
        set background=dark
        let g:gruvbox_contrast_dark = 'hard'
        let g:gruvbox_sign_column = 'bg0'
        if has('termguicolors')
            set termguicolors
        endif
        colorscheme gruvbox
    endif

    set number        " Enable line numbers
    set relativenumber
    set noshowmode    " Provided by lightline
    set laststatus=2  " Always show lightline
    set list
    set cursorline
    set mouse=
    set completeopt-=preview
    set completeopt+=longest,menuone
    set listchars=tab:│·,extends:›,precedes:‹,nbsp:·,trail:·
    set fillchars=stl:\ ,stlnc:\ ,vert:│,fold:\ ,diff:-
    set splitbelow    " splits go below w/focus
    set splitright    " vsplits go right w/focus
    set scrolloff=3   " lines above/below cursor
    set nostartofline " keep cursor column pos
    set nowrap
    set hidden        " switch buffers without saving every time
    set nomodeline    " Disable modeline for security reasons
    set backspace=indent,eol,start
    set sidescroll=1
    set wildignore+=*.bak,*.swp,*.swo
    set wildignore+=*.a,*.o,*.so,*.pyc,*.class
    set wildignore+=*.jpg,*.jpeg,*.gif,*.png,*.pdf
    set wildignore+=*/.git*,*.tar,*.zip
    set wildmenu
    set wildmode=longest:full,list:full
 " }}}

" {{{ Folding
    set foldenable          " enable folding
    set foldlevelstart=10   " open most folds by default
    set foldnestmax=10      " 10 nested fold max
    nnoremap <silent> <Space> @=(foldlevel('.')?'za':"\<Space>")<CR>
    vnoremap <Space> zf
    set foldmethod=indent   " fold based on indent level
" }}}

" {{{ Keybinds
    let mapleader = ","

    set pastetoggle=<F3>

    " Remove multiple empty lines
    nnoremap <silent> <leader>ld :call DeleteMultipleEmptyLines()<CR>

    " Split navigation
    nnoremap <silent> <C-Up> :wincmd k<CR>
    nnoremap <silent> <C-Down> :wincmd j<CR>
    nnoremap <silent> <C-Left> :wincmd h<CR>
    nnoremap <silent> <C-Right> :wincmd l<CR>

    " Buffer navigation
    nnoremap gn :bnext<CR>
    nnoremap gN :bprevious<CR>
    nnoremap gd :bdelete<CR>
    nnoremap gf <C-^>

    " base64 decode visual selection
    vnoremap <leader>64 c<c-r>=system('base64 --decode', @")<cr><esc>

    " Copy/paste to/from system clipboard
    noremap <leader>y "+y
    noremap <leader>p "+p

    " Maintain visual mode after shifting > and <
    vnoremap < <gv
    vnoremap > >gv

    " https://ddrscott.github.io/blog/2016/yank-without-jank/
    vnoremap y myy`y
    vnoremap Y myY`y

    " We don't need any help!
    inoremap <F1> <nop>
    nnoremap <F1> <nop>
    vnoremap <F1> <nop>
" }}}

" {{{ Spaces, Tabs and Indenting
    set tabstop=4     " Number of visual spaces per TAB
    set softtabstop=4 " Number of spaces in tab when editing
    set noexpandtab   " Tabs are not spaces
    set shiftround    " Be clever with partial indenting
    set shiftwidth=4  " Default 8
" }}}

" {{{ Searching
    " Searches will be case insensitive if the search is all lowercase characters and case sensitive otherwise.
    set ignorecase
    set smartcase
" }}}

" {{{ Augroups
    augroup phpstyle
        autocmd!
        autocmd FileType php setlocal expandtab colorcolumn=120
        autocmd FileType php setlocal omnifunc=phpcomplete#CompletePHP
    augroup END

    augroup luastyle
        autocmd!
        autocmd FileType lua setlocal expandtab
    augroup END

    augroup vimstyle
        autocmd!
        autocmd FileType vim setlocal expandtab
    augroup END

    autocmd FileType gitcommit set tw=72

    autocmd FileType fish compiler fish

    " Disable auto-inserting of comments
    autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

    " Fix missing statusline with vim-sensible
    autocmd VimEnter * redraw!

    autocmd FileType help
    \ wincmd L |
    \ vert resize 80

    " Return to last edit position when opening files
    augroup LastPosition
        autocmd! BufReadPost *
            \ if line("'\"") > 0 && line("'\"") <= line("$") |
            \     exe "normal! g`\"" |
            \ endif
    augroup END
" }}}

" Backups and swap {{{
    if exists("&backupdir")
        set backupdir=~/.vim/backups
    endif

    if exists("&directory")
        set directory=~/.vim/swaps
    endif
" }}}

" {{{ Functions
    " Remove multiple empty lines
    function! DeleteMultipleEmptyLines()
        silent! g/^\_$\n\_^$/d
    endfunction

    " Strip trailing whitespace, return to cursor at save
    function! <SID>StripTrailingWhitespace()
        let l = line(".")
        let c = col(".")
        %s/\s\+$//e
        call cursor(l, c)
    endfunction

    function! s:syntastic()
        SyntasticCheck
        call lightline#update()
    endfunction
" }}}

" {{{ Files
    " Persistent undo.
    if has('persistent_undo')
        if exists("&undodir")
            set undodir=~/.vim/undo
        endif
        set undofile
        set undoreload=10000
    endif
    set undolevels=10000
" }}}

" vim:foldmethod=marker:foldlevel=0
